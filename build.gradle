buildscript {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
        maven {
            url("https://plugins.gradle.org/m2/")
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.3.RELEASE")
        classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

allprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'application'

    group 'com.jean.demo'
    version '1.0'

    sourceCompatibility = 1.8
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
    }

}

subprojects {

    /**
     * GIT信息
     */
    apply plugin: "com.gorylenko.gradle-git-properties"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'docker'

    ext {
        brave_mysql = "4.3.4"
        mysql = "5.1.41"
        swagger = "2.5.0"
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.SR1'
        }
    }

    gitProperties {
        dateFormat = "yyyy-MM-dd HH:mm:ss"
        dateFormatTimeZone = "GMT+8:00"
    }

    task buildDocker(type: Docker, dependsOn: build) {
        push = false
        baseImage "java"
        maintainer 'Jinshubao jinshubao123@126.com'
        addFile("${applicationName}-${version}.jar", "app.jar")
        entryPoint(["java", "-jar", "app.jar"] as List)
        doFirst {
            copy {
                from jar
                into stageDir
            }
        }
    }

    /**
     * 扩展application.yml属性，从gradle读取，
     */
    processResources {
        expand(project.properties)
    }

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-hateoas")
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
        compile("org.springframework.cloud:spring-cloud-starter-hystrix")
        compile("org.springframework.cloud:spring-cloud-starter-hystrix-dashboard")
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }
}

project(":eureka-server") {
    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-eureka-server")
    }
}

project(":config-server") {
    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-config")
        compile("org.springframework.cloud:spring-cloud-config-server")
    }
}

project(":api-server-1") {
    dependencies {
        compile("io.springfox:springfox-swagger-ui:${swagger}")
        compile("io.springfox:springfox-swagger2:${swagger}")

        compile("org.springframework.cloud:spring-cloud-config-client")

        compile("com.cwbase:logback-redis-appender:1.1.5")

        compile("org.springframework.cloud:spring-cloud-sleuth-stream")//以消息中间件的方式传递数据
        compile("org.springframework.cloud:spring-cloud-starter-stream-rabbit")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("net.logstash.logback:logstash-logback-encoder:4.9")

//        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
//        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
//        compile("io.zipkin.brave:brave-mysql:${brave_mysql}")
//        runtime("mysql:mysql-connector-java:${mysql}")
    }
}

project(":api-server-2") {

    dependencies {
        compile("io.springfox:springfox-swagger-ui:${swagger}")
        compile("io.springfox:springfox-swagger2:${swagger}")

        compile("org.springframework.cloud:spring-cloud-config-client")

        compile("org.springframework.cloud:spring-cloud-sleuth-stream")//以消息中间件的方式传递数据
        compile("org.springframework.cloud:spring-cloud-starter-stream-rabbit")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile project(":logging-starter")

//        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
//        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
//        compile("io.zipkin.brave:brave-mysql:${brave_mysql}")
//        runtime("mysql:mysql-connector-java:${mysql}")
    }
}

project(":zipkin-server") {
    dependencies {
        compile("org.springframework.cloud:spring-cloud-config-client")
        //        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
//        compile("org.springframework.cloud:spring-cloud-sleuth-zipkin")
        compile('io.zipkin.java:zipkin-server')

        runtime("mysql:mysql-connector-java:${mysql}")
        runtime('io.zipkin.java:zipkin-autoconfigure-ui')
        runtime('io.zipkin.java:zipkin-autoconfigure-storage-mysql')
    }
}

project(":zipkin-server-stream") {
    dependencies {
        compile("org.springframework.cloud:spring-cloud-config-client")
        compile('org.springframework.cloud:spring-cloud-sleuth-zipkin-stream')//以消息中间件的方式传递数据
        compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit')
        compile("org.springframework.boot:spring-boot-starter-jdbc")
        runtime("mysql:mysql-connector-java:${mysql}")
        runtime('io.zipkin.java:zipkin-autoconfigure-ui')
    }
}


project(":turbine-server") {
    dependencies {

        compile("org.springframework.cloud:spring-cloud-config-client")
        compile('org.springframework.cloud:spring-cloud-starter-turbine')
    }
}

project(":logging-starter"){
    dependencies{
        compile("org.springframework.boot:spring-boot-starter")
    }
}